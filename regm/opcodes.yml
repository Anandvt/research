- noop:
    help: does nothing
    args: []
- push:
    help: push a register onto data stack
    args:
      - [register]
- pop:
    help: pop data stack top into a register
    args: 
      - [register]
- set:
    help: set register value
    args:
      - [register]
      - [register, string, number]
- swap:
    help: swap two register values
    args:
      - [register]
      - [register]

- add:
    help: add the second operand to the first
    args:
      - [register]
      - [register, number]
- sub:
    help: subtract the second operand from the first
    args:
      - [register]
      - [register, number]
- mult:
    help: multiply the first operand by the second
    args:
      - [register]
      - [register, number]
- div:
    help: divide the first operand by the second
    args:
      - [register]
      - [register, number]
- mod:
    help: modulo the first operand by the second
    args:
      - [register]
      - [register, number]

- call:
    help: call a user-defined function
    args:
      - [function]

- ret:
    help: return to caller
- retv:
    help: return to caller (with value)
    alias: ret
    args:
      - [register, string, number]

- cmp:
    help: compare two integers
    args:
      - [register, number]
      - [register, number]
- strcmp:
    help: compare two strings
    args:
      - [register, string]
      - [register, string]

- jmp:
    help: unconditional jump
    args:
      - [label]
- jz:
    help: jump if accumulator is 0
    args:
      - [label]
- jnz:
    help: jump if accumulator is not 0
    args:
      - [label]
- je:
    help: jump if accumulator is equal to first operand
    args:
      - [register, number]
      - [label]
- jne:
    help: jump if accumulator is not equal to first operand
    args:
      - [register, number]
      - [label]
- jgt:
    help: jump if accumulator is greater than first operand
    args:
      - [register, number]
      - [label]
- jgte:
    help: jump if accumulator is greater than or equal to first operand
    args:
      - [register, number]
      - [label]
- jlt:
    help: jump if accumulator is less than first operand
    args:
      - [register, number]
      - [label]
- jlte:
    help: jump if accumulator is less than or equal to first operand
    args:
      - [register, number]
      - [label]

- string:
    help: format a (heap-allocated) string
    args:
      - [string, register]
      - [register]

- print:
    help: print a message to standard output
    args:
      - [string]

- dump:
    help: dump virtual machine state for debugging
- halt:
    help: halt the virtual machine

# vim:ft=yaml:et:ts=2:sts=2:sw=2
