/* opcodes.h - generated by gencode */

/** OPCODE CONSTANTS **/
#define NOOP           0000  /* does nothing */
#define PUSH           0x01  /* push a register onto data stack */
#define POP            0x02  /* pop data stack top into a register */
#define SET            0x03  /* set register value */
#define SWAP           0x04  /* swap two register values */
#define ADD            0x05  /* add the second operand to the first */
#define SUB            0x06  /* subtract the second operand from the first */
#define MULT           0x07  /* multiply the first operand by the second */
#define DIV            0x08  /* divide the first operand by the second */
#define MOD            0x09  /* modulo the first operand by the second */
#define CALL           0x0a  /* call a user-defined function */
#define RET            0x0b  /* return to caller */
#define CMP            0x0c  /* compare two integers */
#define STRCMP         0x0d  /* compare two strings */
#define JMP            0x0e  /* unconditional jump */
#define JZ             0x0f  /* jump if accumulator is 0 */
#define JNZ            0x10  /* jump if accumulator is not 0 */
#define ECHO           0x11  /* print a message to standard output */
#define ERR            0x12  /* print an error */
#define PERROR         0x13  /* print an error (with system error message) */
#define BAIL           0x14  /* ... */
#define MARK           0x15  /* ... */
#define FS_STAT        0x16  /* check to see if a file exists */
#define FS_FILE_P      0x17  /* is a path a regular file? */
#define FS_SYMLINK_P   0x18  /* is a path a symbolic link? */
#define FS_DIR_P       0x19  /* is a path a directory? */
#define FS_CHARDEV_P   0x1a  /* is a path a character device? */
#define FS_BLOCKDEV_P  0x1b  /* is a path a block device? */
#define FS_FIFO_P      0x1c  /* is a path a FIFO queue? */
#define FS_SOCKET_P    0x1d  /* is a path a socket? */
#define FS_READLINK    0x1e  /* get the value of a symbolic link */
#define FS_DEV         0x1f  /* get the ID of the device containing a file */
#define FS_INODE       0x20  /* get the inode of a file */
#define FS_MODE        0x21  /* get the mode (permissions) of a file */
#define FS_NLINK       0x22  /* get the number of hard links to a file */
#define FS_UID         0x23  /* get the UID of the file's owner */
#define FS_GID         0x24  /* get the GID of the file's group */
#define FS_MAJOR       0x25  /* get the device major number (char/block devices only) */
#define FS_MINOR       0x26  /* get the device minor number (char/block devices only) */
#define FS_SIZE        0x27  /* get the size of a file */
#define FS_ATIME       0x28  /* get the access time of a file */
#define FS_MTIME       0x29  /* get the modification time of a file */
#define FS_CTIME       0x2a  /* get the inode change time of a file */
#define FS_TOUCH       0x2b  /* touch a file (create or update its utime) */
#define FS_MKDIR       0x2c  /* create a new (empty) directory */
#define FS_LINK        0x2d  /* create a file link */
#define FS_SYMLINK     0x2e  /* create a symbolic link */
#define FS_UNLINK      0x2f  /* remove a file */
#define FS_RMDIR       0x30  /* remove an empty directory */
#define FS_RENAME      0x31  /* rename a file */
#define FS_COPY        0x32  /* copy a file from one name to another */
#define FS_CHOWN       0x33  /* change file ownership */
#define FS_CHGRP       0x34  /* change file group ownership */
#define FS_CHMOD       0x35  /* change file permissions */
#define FS_SHA1        0x36  /* calculate SHA1 of a file's contents */
#define FS_GET         0x37  /* retrieve the contents of a local file */
#define FS_PUT         0x38  /* update the contents of a local file */
#define GETFILE        0x39  /* retrieve a file from the server */
#define GETUID         0x3a  /* look up a user's UID, by name */
#define GETGID         0x3b  /* look up a group's GID, by name */
#define EXEC           0x3c  /* execute a command */
#define DUMP           0x3d  /* dump virtual machine state for debugging */
#define HALT           0x3e  /* halt the virtual machine */


#ifdef OPCODES_EXTENDED
/** OPCODE MNEMONIC NAMES **/
static const char * OPCODES[] = {
	"noop",          /* NOOP            0  0000 */
	"push",          /* PUSH            1  0x01 */
	"pop",           /* POP             2  0x02 */
	"set",           /* SET             3  0x03 */
	"swap",          /* SWAP            4  0x04 */
	"add",           /* ADD             5  0x05 */
	"sub",           /* SUB             6  0x06 */
	"mult",          /* MULT            7  0x07 */
	"div",           /* DIV             8  0x08 */
	"mod",           /* MOD             9  0x09 */
	"call",          /* CALL           10  0x0a */
	"ret",           /* RET            11  0x0b */
	"cmp",           /* CMP            12  0x0c */
	"strcmp",        /* STRCMP         13  0x0d */
	"jmp",           /* JMP            14  0x0e */
	"jz",            /* JZ             15  0x0f */
	"jnz",           /* JNZ            16  0x10 */
	"echo",          /* ECHO           17  0x11 */
	"err",           /* ERR            18  0x12 */
	"perror",        /* PERROR         19  0x13 */
	"bail",          /* BAIL           20  0x14 */
	"mark",          /* MARK           21  0x15 */
	"fs.stat",       /* FS_STAT        22  0x16 */
	"fs.file?",      /* FS_FILE_P      23  0x17 */
	"fs.symlink?",   /* FS_SYMLINK_P   24  0x18 */
	"fs.dir?",       /* FS_DIR_P       25  0x19 */
	"fs.chardev?",   /* FS_CHARDEV_P   26  0x1a */
	"fs.blockdev?",  /* FS_BLOCKDEV_P  27  0x1b */
	"fs.fifo?",      /* FS_FIFO_P      28  0x1c */
	"fs.socket?",    /* FS_SOCKET_P    29  0x1d */
	"fs.readlink",   /* FS_READLINK    30  0x1e */
	"fs.dev",        /* FS_DEV         31  0x1f */
	"fs.inode",      /* FS_INODE       32  0x20 */
	"fs.mode",       /* FS_MODE        33  0x21 */
	"fs.nlink",      /* FS_NLINK       34  0x22 */
	"fs.uid",        /* FS_UID         35  0x23 */
	"fs.gid",        /* FS_GID         36  0x24 */
	"fs.major",      /* FS_MAJOR       37  0x25 */
	"fs.minor",      /* FS_MINOR       38  0x26 */
	"fs.size",       /* FS_SIZE        39  0x27 */
	"fs.atime",      /* FS_ATIME       40  0x28 */
	"fs.mtime",      /* FS_MTIME       41  0x29 */
	"fs.ctime",      /* FS_CTIME       42  0x2a */
	"fs.touch",      /* FS_TOUCH       43  0x2b */
	"fs.mkdir",      /* FS_MKDIR       44  0x2c */
	"fs.link",       /* FS_LINK        45  0x2d */
	"fs.symlink",    /* FS_SYMLINK     46  0x2e */
	"fs.unlink",     /* FS_UNLINK      47  0x2f */
	"fs.rmdir",      /* FS_RMDIR       48  0x30 */
	"fs.rename",     /* FS_RENAME      49  0x31 */
	"fs.copy",       /* FS_COPY        50  0x32 */
	"fs.chown",      /* FS_CHOWN       51  0x33 */
	"fs.chgrp",      /* FS_CHGRP       52  0x34 */
	"fs.chmod",      /* FS_CHMOD       53  0x35 */
	"fs.sha1",       /* FS_SHA1        54  0x36 */
	"fs.get",        /* FS_GET         55  0x37 */
	"fs.put",        /* FS_PUT         56  0x38 */
	"getfile",       /* GETFILE        57  0x39 */
	"getuid",        /* GETUID         58  0x3a */
	"getgid",        /* GETGID         59  0x3b */
	"exec",          /* EXEC           60  0x3c */
	"dump",          /* DUMP           61  0x3d */
	"halt",          /* HALT           62  0x3e */
	NULL,
};


/** ASM TOKENS **/
#define T_OPCODE_NOOP           0x40  /* does nothing */
#define T_OPCODE_PUSH           0x41  /* push a register onto data stack */
#define T_OPCODE_POP            0x42  /* pop data stack top into a register */
#define T_OPCODE_SET            0x43  /* set register value */
#define T_OPCODE_SWAP           0x44  /* swap two register values */
#define T_OPCODE_ADD            0x45  /* add the second operand to the first */
#define T_OPCODE_SUB            0x46  /* subtract the second operand from the first */
#define T_OPCODE_MULT           0x47  /* multiply the first operand by the second */
#define T_OPCODE_DIV            0x48  /* divide the first operand by the second */
#define T_OPCODE_MOD            0x49  /* modulo the first operand by the second */
#define T_OPCODE_CALL           0x4a  /* call a user-defined function */
#define T_OPCODE_RET            0x4b  /* return to caller */
#define T_OPCODE_RETV           0x4c  /* return to caller (with value) */
#define T_OPCODE_CMP            0x4d  /* compare two integers */
#define T_OPCODE_STRCMP         0x4e  /* compare two strings */
#define T_OPCODE_JMP            0x4f  /* unconditional jump */
#define T_OPCODE_JZ             0x50  /* jump if accumulator is 0 */
#define T_OPCODE_JNZ            0x51  /* jump if accumulator is not 0 */
#define T_OPCODE_ECHO           0x52  /* print a message to standard output */
#define T_OPCODE_ERR            0x53  /* print an error */
#define T_OPCODE_PERROR         0x54  /* print an error (with system error message) */
#define T_OPCODE_BAIL           0x55  /* ... */
#define T_OPCODE_MARK           0x56  /* ... */
#define T_OPCODE_FS_STAT        0x57  /* check to see if a file exists */
#define T_OPCODE_FS_FILE_P      0x58  /* is a path a regular file? */
#define T_OPCODE_FS_SYMLINK_P   0x59  /* is a path a symbolic link? */
#define T_OPCODE_FS_DIR_P       0x5a  /* is a path a directory? */
#define T_OPCODE_FS_CHARDEV_P   0x5b  /* is a path a character device? */
#define T_OPCODE_FS_BLOCKDEV_P  0x5c  /* is a path a block device? */
#define T_OPCODE_FS_FIFO_P      0x5d  /* is a path a FIFO queue? */
#define T_OPCODE_FS_SOCKET_P    0x5e  /* is a path a socket? */
#define T_OPCODE_FS_READLINK    0x5f  /* get the value of a symbolic link */
#define T_OPCODE_FS_DEV         0x60  /* get the ID of the device containing a file */
#define T_OPCODE_FS_INODE       0x61  /* get the inode of a file */
#define T_OPCODE_FS_MODE        0x62  /* get the mode (permissions) of a file */
#define T_OPCODE_FS_NLINK       0x63  /* get the number of hard links to a file */
#define T_OPCODE_FS_UID         0x64  /* get the UID of the file's owner */
#define T_OPCODE_FS_GID         0x65  /* get the GID of the file's group */
#define T_OPCODE_FS_MAJOR       0x66  /* get the device major number (char/block devices only) */
#define T_OPCODE_FS_MINOR       0x67  /* get the device minor number (char/block devices only) */
#define T_OPCODE_FS_SIZE        0x68  /* get the size of a file */
#define T_OPCODE_FS_ATIME       0x69  /* get the access time of a file */
#define T_OPCODE_FS_MTIME       0x6a  /* get the modification time of a file */
#define T_OPCODE_FS_CTIME       0x6b  /* get the inode change time of a file */
#define T_OPCODE_FS_TOUCH       0x6c  /* touch a file (create or update its utime) */
#define T_OPCODE_FS_MKDIR       0x6d  /* create a new (empty) directory */
#define T_OPCODE_FS_LINK        0x6e  /* create a file link */
#define T_OPCODE_FS_SYMLINK     0x6f  /* create a symbolic link */
#define T_OPCODE_FS_UNLINK      0x70  /* remove a file */
#define T_OPCODE_FS_RMDIR       0x71  /* remove an empty directory */
#define T_OPCODE_FS_RENAME      0x72  /* rename a file */
#define T_OPCODE_FS_COPY        0x73  /* copy a file from one name to another */
#define T_OPCODE_FS_CHOWN       0x74  /* change file ownership */
#define T_OPCODE_FS_CHGRP       0x75  /* change file group ownership */
#define T_OPCODE_FS_CHMOD       0x76  /* change file permissions */
#define T_OPCODE_FS_SHA1        0x77  /* calculate SHA1 of a file's contents */
#define T_OPCODE_FS_GET         0x78  /* retrieve the contents of a local file */
#define T_OPCODE_FS_PUT         0x79  /* update the contents of a local file */
#define T_OPCODE_GETFILE        0x7a  /* retrieve a file from the server */
#define T_OPCODE_GETUID         0x7b  /* look up a user's UID, by name */
#define T_OPCODE_GETGID         0x7c  /* look up a group's GID, by name */
#define T_OPCODE_EXEC           0x7d  /* execute a command */
#define T_OPCODE_DUMP           0x7e  /* dump virtual machine state for debugging */
#define T_OPCODE_HALT           0x7f  /* halt the virtual machine */


static const char * ASM[] = {
	"noop",          /* T_OPCODE_NOOP            0  0000 */
	"push",          /* T_OPCODE_PUSH            1  0x01 */
	"pop",           /* T_OPCODE_POP             2  0x02 */
	"set",           /* T_OPCODE_SET             3  0x03 */
	"swap",          /* T_OPCODE_SWAP            4  0x04 */
	"add",           /* T_OPCODE_ADD             5  0x05 */
	"sub",           /* T_OPCODE_SUB             6  0x06 */
	"mult",          /* T_OPCODE_MULT            7  0x07 */
	"div",           /* T_OPCODE_DIV             8  0x08 */
	"mod",           /* T_OPCODE_MOD             9  0x09 */
	"call",          /* T_OPCODE_CALL           10  0x0a */
	"ret",           /* T_OPCODE_RET            11  0x0b */
	"retv",          /* T_OPCODE_RETV           12  0x0c */
	"cmp",           /* T_OPCODE_CMP            13  0x0d */
	"strcmp",        /* T_OPCODE_STRCMP         14  0x0e */
	"jmp",           /* T_OPCODE_JMP            15  0x0f */
	"jz",            /* T_OPCODE_JZ             16  0x10 */
	"jnz",           /* T_OPCODE_JNZ            17  0x11 */
	"echo",          /* T_OPCODE_ECHO           18  0x12 */
	"err",           /* T_OPCODE_ERR            19  0x13 */
	"perror",        /* T_OPCODE_PERROR         20  0x14 */
	"bail",          /* T_OPCODE_BAIL           21  0x15 */
	"mark",          /* T_OPCODE_MARK           22  0x16 */
	"fs.stat",       /* T_OPCODE_FS_STAT        23  0x17 */
	"fs.file?",      /* T_OPCODE_FS_FILE_P      24  0x18 */
	"fs.symlink?",   /* T_OPCODE_FS_SYMLINK_P   25  0x19 */
	"fs.dir?",       /* T_OPCODE_FS_DIR_P       26  0x1a */
	"fs.chardev?",   /* T_OPCODE_FS_CHARDEV_P   27  0x1b */
	"fs.blockdev?",  /* T_OPCODE_FS_BLOCKDEV_P  28  0x1c */
	"fs.fifo?",      /* T_OPCODE_FS_FIFO_P      29  0x1d */
	"fs.socket?",    /* T_OPCODE_FS_SOCKET_P    30  0x1e */
	"fs.readlink",   /* T_OPCODE_FS_READLINK    31  0x1f */
	"fs.dev",        /* T_OPCODE_FS_DEV         32  0x20 */
	"fs.inode",      /* T_OPCODE_FS_INODE       33  0x21 */
	"fs.mode",       /* T_OPCODE_FS_MODE        34  0x22 */
	"fs.nlink",      /* T_OPCODE_FS_NLINK       35  0x23 */
	"fs.uid",        /* T_OPCODE_FS_UID         36  0x24 */
	"fs.gid",        /* T_OPCODE_FS_GID         37  0x25 */
	"fs.major",      /* T_OPCODE_FS_MAJOR       38  0x26 */
	"fs.minor",      /* T_OPCODE_FS_MINOR       39  0x27 */
	"fs.size",       /* T_OPCODE_FS_SIZE        40  0x28 */
	"fs.atime",      /* T_OPCODE_FS_ATIME       41  0x29 */
	"fs.mtime",      /* T_OPCODE_FS_MTIME       42  0x2a */
	"fs.ctime",      /* T_OPCODE_FS_CTIME       43  0x2b */
	"fs.touch",      /* T_OPCODE_FS_TOUCH       44  0x2c */
	"fs.mkdir",      /* T_OPCODE_FS_MKDIR       45  0x2d */
	"fs.link",       /* T_OPCODE_FS_LINK        46  0x2e */
	"fs.symlink",    /* T_OPCODE_FS_SYMLINK     47  0x2f */
	"fs.unlink",     /* T_OPCODE_FS_UNLINK      48  0x30 */
	"fs.rmdir",      /* T_OPCODE_FS_RMDIR       49  0x31 */
	"fs.rename",     /* T_OPCODE_FS_RENAME      50  0x32 */
	"fs.copy",       /* T_OPCODE_FS_COPY        51  0x33 */
	"fs.chown",      /* T_OPCODE_FS_CHOWN       52  0x34 */
	"fs.chgrp",      /* T_OPCODE_FS_CHGRP       53  0x35 */
	"fs.chmod",      /* T_OPCODE_FS_CHMOD       54  0x36 */
	"fs.sha1",       /* T_OPCODE_FS_SHA1        55  0x37 */
	"fs.get",        /* T_OPCODE_FS_GET         56  0x38 */
	"fs.put",        /* T_OPCODE_FS_PUT         57  0x39 */
	"getfile",       /* T_OPCODE_GETFILE        58  0x3a */
	"getuid",        /* T_OPCODE_GETUID         59  0x3b */
	"getgid",        /* T_OPCODE_GETGID         60  0x3c */
	"exec",          /* T_OPCODE_EXEC           61  0x3d */
	"dump",          /* T_OPCODE_DUMP           62  0x3e */
	"halt",          /* T_OPCODE_HALT           63  0x3f */
	NULL,
};

#define ARG_NONE      0x00
#define ARG_REGISTER  0x01
#define ARG_NUMBER    0x02
#define ARG_STRING    0x04
#define ARG_LABEL     0x08
#define ARG_FUNCTION  0x10

static struct {
	byte_t      token;
	const char *usage;
	byte_t      opcode;
	byte_t      args[2];
} ASM_SYNTAX[] = {
	{ T_OPCODE_NOOP,          "noop",                                   NOOP,          { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PUSH,          "push %a",                                PUSH,          { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_POP,           "pop %a",                                 POP,           { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_SET,           "set %a (%b|<string>|<number>)",          SET,           { ARG_REGISTER,                       ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_SWAP,          "swap %a %b",                             SWAP,          { ARG_REGISTER,                       ARG_REGISTER,                       } },
	{ T_OPCODE_ADD,           "add %a (%b|<number>)",                   ADD,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_SUB,           "sub %a (%b|<number>)",                   SUB,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MULT,          "mult %a (%b|<number>)",                  MULT,          { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_DIV,           "div %a (%b|<number>)",                   DIV,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MOD,           "mod %a (%b|<number>)",                   MOD,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_CALL,          "call <function>",                        CALL,          { ARG_FUNCTION,                       ARG_NONE,                           } },
	{ T_OPCODE_RET,           "ret",                                    RET,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_RETV,          "retv (%a|<string>|<number>)",            RET,           { ARG_REGISTER|ARG_STRING|ARG_NUMBER, ARG_NONE,                           } },
	{ T_OPCODE_CMP,           "cmp (%a|<number>) (%b|<number>)",        CMP,           { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_STRCMP,        "strcmp (%a|<string>) (%b|<string>)",     STRCMP,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_JMP,           "jmp <label>",                            JMP,           { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JZ,            "jz <label>",                             JZ,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JNZ,           "jnz <label>",                            JNZ,           { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_ECHO,          "echo <string>",                          ECHO,          { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_ERR,           "err <string>",                           ERR,           { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_PERROR,        "perror <string>",                        PERROR,        { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_BAIL,          "bail",                                   BAIL,          { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_MARK,          "mark",                                   MARK,          { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_FS_STAT,       "fs.stat (%a|<string>)",                  FS_STAT,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FILE_P,     "fs.file? (%a|<string>)",                 FS_FILE_P,     { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SYMLINK_P,  "fs.symlink? (%a|<string>)",              FS_SYMLINK_P,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_DIR_P,      "fs.dir? (%a|<string>)",                  FS_DIR_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_CHARDEV_P,  "fs.chardev? (%a|<string>)",              FS_CHARDEV_P,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_BLOCKDEV_P, "fs.blockdev? (%a|<string>)",             FS_BLOCKDEV_P, { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FIFO_P,     "fs.fifo? (%a|<string>)",                 FS_FIFO_P,     { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SOCKET_P,   "fs.socket? (%a|<string>)",               FS_SOCKET_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_READLINK,   "fs.readlink (%a|<string>) %b",           FS_READLINK,   { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_DEV,        "fs.dev (%a|<string>) %b",                FS_DEV,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_INODE,      "fs.inode (%a|<string>) %b",              FS_INODE,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MODE,       "fs.mode (%a|<string>) %b",               FS_MODE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_NLINK,      "fs.nlink (%a|<string>) %b",              FS_NLINK,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_UID,        "fs.uid (%a|<string>) %b",                FS_UID,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GID,        "fs.gid (%a|<string>) %b",                FS_GID,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MAJOR,      "fs.major (%a|<string>) %b",              FS_MAJOR,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MINOR,      "fs.minor (%a|<string>) %b",              FS_MINOR,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_SIZE,       "fs.size (%a|<string>) %b",               FS_SIZE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_ATIME,      "fs.atime (%a|<string>) %b",              FS_ATIME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MTIME,      "fs.mtime (%a|<string>) %b",              FS_MTIME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_CTIME,      "fs.ctime (%a|<string>) %b",              FS_CTIME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_TOUCH,      "fs.touch (%a|<string>)",                 FS_TOUCH,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_MKDIR,      "fs.mkdir (%a|<string>)",                 FS_MKDIR,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_LINK,       "fs.link (%a|<string>) (%b|<string>)",    FS_LINK,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_SYMLINK,    "fs.symlink (%a|<string>) (%b|<string>)", FS_SYMLINK,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_UNLINK,     "fs.unlink (%a|<string>)",                FS_UNLINK,     { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RMDIR,      "fs.rmdir (%a|<string>)",                 FS_RMDIR,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RENAME,     "fs.rename (%a|<string>) (%b|<string>)",  FS_RENAME,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_COPY,       "fs.copy (%a|<string>) (%b|<string>)",    FS_COPY,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_CHOWN,      "fs.chown (%a|<string>) (%b|<number>)",   FS_CHOWN,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHGRP,      "fs.chgrp (%a|<string>) (%b|<number>)",   FS_CHGRP,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHMOD,      "fs.chmod (%a|<string>) (%b|<number>)",   FS_CHMOD,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_SHA1,       "fs.sha1 (%a|<string>) %b",               FS_SHA1,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GET,        "fs.get (%a|<string>) %b",                FS_GET,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_PUT,        "fs.put (%a|<string>) (%b|<string>)",     FS_PUT,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GETFILE,       "getfile (%a|<string>) (%b|<string>)",    GETFILE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GETUID,        "getuid (%a|<string>) %b",                GETUID,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_GETGID,        "getgid (%a|<string>) %b",                GETGID,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_EXEC,          "exec (%a|<string>) %b",                  EXEC,          { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_DUMP,          "dump",                                   DUMP,          { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_HALT,          "halt",                                   HALT,          { ARG_NONE,                           ARG_NONE,                           } },
	{ 0, 0, 0, { 0, 0 } },
};

#endif
