/* opcodes.h - generated by gencode */

/** OPCODE CONSTANTS **/
#define NOOP            0000  /* does nothing */
#define PUSH            0x01  /* push a register onto data stack */
#define POP             0x02  /* pop data stack top into a register */
#define SET             0x03  /* set register value */
#define SWAP            0x04  /* swap two register values */
#define ADD             0x05  /* add the second operand to the first */
#define SUB             0x06  /* subtract the second operand from the first */
#define MULT            0x07  /* multiply the first operand by the second */
#define DIV             0x08  /* divide the first operand by the second */
#define MOD             0x09  /* modulo the first operand by the second */
#define CALL            0x0a  /* call a user-defined function */
#define RET             0x0b  /* return to caller */
#define CMP             0x0c  /* compare two integers */
#define STRCMP          0x0d  /* compare two strings */
#define JMP             0x0e  /* unconditional jump */
#define JZ              0x0f  /* jump if accumulator is 0 */
#define JNZ             0x10  /* jump if accumulator is not 0 */
#define STR             0x11  /* format a (heap-allocated) string */
#define ECHO            0x12  /* print a message to standard output */
#define ERR             0x13  /* print an error */
#define PERROR          0x14  /* print an error (with system error message) */
#define BAIL            0x15  /* ... */
#define MARK            0x16  /* ... */
#define FS_STAT         0x17  /* check to see if a file exists */
#define FS_FILE_P       0x18  /* is a path a regular file? */
#define FS_SYMLINK_P    0x19  /* is a path a symbolic link? */
#define FS_DIR_P        0x1a  /* is a path a directory? */
#define FS_CHARDEV_P    0x1b  /* is a path a character device? */
#define FS_BLOCKDEV_P   0x1c  /* is a path a block device? */
#define FS_FIFO_P       0x1d  /* is a path a FIFO queue? */
#define FS_SOCKET_P     0x1e  /* is a path a socket? */
#define FS_READLINK     0x1f  /* get the value of a symbolic link */
#define FS_DEV          0x20  /* get the ID of the device containing a file */
#define FS_INODE        0x21  /* get the inode of a file */
#define FS_MODE         0x22  /* get the mode (permissions) of a file */
#define FS_NLINK        0x23  /* get the number of hard links to a file */
#define FS_UID          0x24  /* get the UID of the file's owner */
#define FS_GID          0x25  /* get the GID of the file's group */
#define FS_MAJOR        0x26  /* get the device major number (char/block devices only) */
#define FS_MINOR        0x27  /* get the device minor number (char/block devices only) */
#define FS_SIZE         0x28  /* get the size of a file */
#define FS_ATIME        0x29  /* get the access time of a file */
#define FS_MTIME        0x2a  /* get the modification time of a file */
#define FS_CTIME        0x2b  /* get the inode change time of a file */
#define FS_TOUCH        0x2c  /* touch a file (create or update its utime) */
#define FS_MKDIR        0x2d  /* create a new (empty) directory */
#define FS_LINK         0x2e  /* create a file link */
#define FS_SYMLINK      0x2f  /* create a symbolic link */
#define FS_UNLINK       0x30  /* remove a file */
#define FS_RMDIR        0x31  /* remove an empty directory */
#define FS_RENAME       0x32  /* rename a file */
#define FS_COPY         0x33  /* copy a file from one name to another */
#define FS_CHOWN        0x34  /* change file ownership */
#define FS_CHGRP        0x35  /* change file group ownership */
#define FS_CHMOD        0x36  /* change file permissions */
#define FS_SHA1         0x37  /* calculate SHA1 of a file's contents */
#define FS_GET          0x38  /* retrieve the contents of a local file */
#define FS_PUT          0x39  /* update the contents of a local file */
#define GETFILE         0x3a  /* retrieve a file from the server */
#define GETUID          0x3b  /* look up a user's UID, by name */
#define GETGID          0x3c  /* look up a group's GID, by name */
#define PASSWD_OPEN     0x3d  /* open the passwd/shadow (and group) databases for reading or writing */
#define PASSWD_SAVE     0x3e  /* writes the passwd/shadow (and group) databases to disk */
#define PASSWD_CLOSE    0x3f  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define PASSWD_NEXTUID  0x40  /* return the next available UID into a register */
#define PASSWD_NEXTGID  0x41  /* return the next available GID into a register */
#define USER_FIND       0x42  /* find a user by username, storing the UID into a register */
#define USER_GET        0x43  /* retrieve the value of an attribute from the last found user */
#define USER_SET        0x44  /* set an attribute on the last found user */
#define USER_NEW        0x45  /* allocate a new (unsaved) user object */
#define USER_SAVE       0x46  /* commit changes to the current user object (in-memory only) */
#define USER_DELETE     0x47  /* remove the current user from the (in-memory) database */
#define GROUP_FIND      0x48  /* find a group by name, storing the GID into a register */
#define GROUP_GET       0x49  /* retrieve the value of an attribute from the last found group */
#define GROUP_SET       0x4a  /* set an attribute on the last found group */
#define GROUP_NEW       0x4b  /* allocate a new (unsaved) group object */
#define GROUP_SAVE      0x4c  /* commit changes to the current group object (in-memory only) */
#define GROUP_DELETE    0x4d  /* remove the current group from the (in-memory) database */
#define AUGEAS_INIT     0x4e  /* initialize the augeas system */
#define AUGEAS_DONE     0x4f  /* de-initializes the augeas system */
#define AUGEAS_ERR      0x50  /* print a helpful augeas error message */
#define AUGEAS_WRITE    0x51  /* write all pending changes to disk */
#define AUGEAS_SET      0x52  /* set the value of a file/key */
#define AUGEAS_GET      0x53  /* retrieve the value of a file/key */
#define AUGEAS_FIND     0x54  /* search for and retrieve the value of file/key */
#define AUGEAS_REMOVE   0x55  /* remove a file/key */
#define EXEC            0x56  /* execute a command */
#define DUMP            0x57  /* dump virtual machine state for debugging */
#define HALT            0x58  /* halt the virtual machine */


#ifdef OPCODES_EXTENDED
/** OPCODE MNEMONIC NAMES **/
static const char * OPCODES[] = {
	"noop",           /* NOOP             0  0000 */
	"push",           /* PUSH             1  0x01 */
	"pop",            /* POP              2  0x02 */
	"set",            /* SET              3  0x03 */
	"swap",           /* SWAP             4  0x04 */
	"add",            /* ADD              5  0x05 */
	"sub",            /* SUB              6  0x06 */
	"mult",           /* MULT             7  0x07 */
	"div",            /* DIV              8  0x08 */
	"mod",            /* MOD              9  0x09 */
	"call",           /* CALL            10  0x0a */
	"ret",            /* RET             11  0x0b */
	"cmp",            /* CMP             12  0x0c */
	"strcmp",         /* STRCMP          13  0x0d */
	"jmp",            /* JMP             14  0x0e */
	"jz",             /* JZ              15  0x0f */
	"jnz",            /* JNZ             16  0x10 */
	"str",            /* STR             17  0x11 */
	"echo",           /* ECHO            18  0x12 */
	"err",            /* ERR             19  0x13 */
	"perror",         /* PERROR          20  0x14 */
	"bail",           /* BAIL            21  0x15 */
	"mark",           /* MARK            22  0x16 */
	"fs.stat",        /* FS_STAT         23  0x17 */
	"fs.file?",       /* FS_FILE_P       24  0x18 */
	"fs.symlink?",    /* FS_SYMLINK_P    25  0x19 */
	"fs.dir?",        /* FS_DIR_P        26  0x1a */
	"fs.chardev?",    /* FS_CHARDEV_P    27  0x1b */
	"fs.blockdev?",   /* FS_BLOCKDEV_P   28  0x1c */
	"fs.fifo?",       /* FS_FIFO_P       29  0x1d */
	"fs.socket?",     /* FS_SOCKET_P     30  0x1e */
	"fs.readlink",    /* FS_READLINK     31  0x1f */
	"fs.dev",         /* FS_DEV          32  0x20 */
	"fs.inode",       /* FS_INODE        33  0x21 */
	"fs.mode",        /* FS_MODE         34  0x22 */
	"fs.nlink",       /* FS_NLINK        35  0x23 */
	"fs.uid",         /* FS_UID          36  0x24 */
	"fs.gid",         /* FS_GID          37  0x25 */
	"fs.major",       /* FS_MAJOR        38  0x26 */
	"fs.minor",       /* FS_MINOR        39  0x27 */
	"fs.size",        /* FS_SIZE         40  0x28 */
	"fs.atime",       /* FS_ATIME        41  0x29 */
	"fs.mtime",       /* FS_MTIME        42  0x2a */
	"fs.ctime",       /* FS_CTIME        43  0x2b */
	"fs.touch",       /* FS_TOUCH        44  0x2c */
	"fs.mkdir",       /* FS_MKDIR        45  0x2d */
	"fs.link",        /* FS_LINK         46  0x2e */
	"fs.symlink",     /* FS_SYMLINK      47  0x2f */
	"fs.unlink",      /* FS_UNLINK       48  0x30 */
	"fs.rmdir",       /* FS_RMDIR        49  0x31 */
	"fs.rename",      /* FS_RENAME       50  0x32 */
	"fs.copy",        /* FS_COPY         51  0x33 */
	"fs.chown",       /* FS_CHOWN        52  0x34 */
	"fs.chgrp",       /* FS_CHGRP        53  0x35 */
	"fs.chmod",       /* FS_CHMOD        54  0x36 */
	"fs.sha1",        /* FS_SHA1         55  0x37 */
	"fs.get",         /* FS_GET          56  0x38 */
	"fs.put",         /* FS_PUT          57  0x39 */
	"getfile",        /* GETFILE         58  0x3a */
	"getuid",         /* GETUID          59  0x3b */
	"getgid",         /* GETGID          60  0x3c */
	"passwd.open",    /* PASSWD_OPEN     61  0x3d */
	"passwd.save",    /* PASSWD_SAVE     62  0x3e */
	"passwd.close",   /* PASSWD_CLOSE    63  0x3f */
	"passwd.nextuid", /* PASSWD_NEXTUID  64  0x40 */
	"passwd.nextgid", /* PASSWD_NEXTGID  65  0x41 */
	"user.find",      /* USER_FIND       66  0x42 */
	"user.get",       /* USER_GET        67  0x43 */
	"user.set",       /* USER_SET        68  0x44 */
	"user.new",       /* USER_NEW        69  0x45 */
	"user.save",      /* USER_SAVE       70  0x46 */
	"user.delete",    /* USER_DELETE     71  0x47 */
	"group.find",     /* GROUP_FIND      72  0x48 */
	"group.get",      /* GROUP_GET       73  0x49 */
	"group.set",      /* GROUP_SET       74  0x4a */
	"group.new",      /* GROUP_NEW       75  0x4b */
	"group.save",     /* GROUP_SAVE      76  0x4c */
	"group.delete",   /* GROUP_DELETE    77  0x4d */
	"augeas.init",    /* AUGEAS_INIT     78  0x4e */
	"augeas.done",    /* AUGEAS_DONE     79  0x4f */
	"augeas.err",     /* AUGEAS_ERR      80  0x50 */
	"augeas.write",   /* AUGEAS_WRITE    81  0x51 */
	"augeas.set",     /* AUGEAS_SET      82  0x52 */
	"augeas.get",     /* AUGEAS_GET      83  0x53 */
	"augeas.find",    /* AUGEAS_FIND     84  0x54 */
	"augeas.remove",  /* AUGEAS_REMOVE   85  0x55 */
	"exec",           /* EXEC            86  0x56 */
	"dump",           /* DUMP            87  0x57 */
	"halt",           /* HALT            88  0x58 */
	NULL,
};


/** ASM TOKENS **/
#define T_OPCODE_NOOP            0x40  /* does nothing */
#define T_OPCODE_PUSH            0x41  /* push a register onto data stack */
#define T_OPCODE_POP             0x42  /* pop data stack top into a register */
#define T_OPCODE_SET             0x43  /* set register value */
#define T_OPCODE_SWAP            0x44  /* swap two register values */
#define T_OPCODE_ADD             0x45  /* add the second operand to the first */
#define T_OPCODE_SUB             0x46  /* subtract the second operand from the first */
#define T_OPCODE_MULT            0x47  /* multiply the first operand by the second */
#define T_OPCODE_DIV             0x48  /* divide the first operand by the second */
#define T_OPCODE_MOD             0x49  /* modulo the first operand by the second */
#define T_OPCODE_CALL            0x4a  /* call a user-defined function */
#define T_OPCODE_RET             0x4b  /* return to caller */
#define T_OPCODE_RETV            0x4c  /* return to caller (with value) */
#define T_OPCODE_CMP             0x4d  /* compare two integers */
#define T_OPCODE_STRCMP          0x4e  /* compare two strings */
#define T_OPCODE_JMP             0x4f  /* unconditional jump */
#define T_OPCODE_JZ              0x50  /* jump if accumulator is 0 */
#define T_OPCODE_JNZ             0x51  /* jump if accumulator is not 0 */
#define T_OPCODE_STR             0x52  /* format a (heap-allocated) string */
#define T_OPCODE_ECHO            0x53  /* print a message to standard output */
#define T_OPCODE_ERR             0x54  /* print an error */
#define T_OPCODE_PERROR          0x55  /* print an error (with system error message) */
#define T_OPCODE_BAIL            0x56  /* ... */
#define T_OPCODE_MARK            0x57  /* ... */
#define T_OPCODE_FS_STAT         0x58  /* check to see if a file exists */
#define T_OPCODE_FS_FILE_P       0x59  /* is a path a regular file? */
#define T_OPCODE_FS_SYMLINK_P    0x5a  /* is a path a symbolic link? */
#define T_OPCODE_FS_DIR_P        0x5b  /* is a path a directory? */
#define T_OPCODE_FS_CHARDEV_P    0x5c  /* is a path a character device? */
#define T_OPCODE_FS_BLOCKDEV_P   0x5d  /* is a path a block device? */
#define T_OPCODE_FS_FIFO_P       0x5e  /* is a path a FIFO queue? */
#define T_OPCODE_FS_SOCKET_P     0x5f  /* is a path a socket? */
#define T_OPCODE_FS_READLINK     0x60  /* get the value of a symbolic link */
#define T_OPCODE_FS_DEV          0x61  /* get the ID of the device containing a file */
#define T_OPCODE_FS_INODE        0x62  /* get the inode of a file */
#define T_OPCODE_FS_MODE         0x63  /* get the mode (permissions) of a file */
#define T_OPCODE_FS_NLINK        0x64  /* get the number of hard links to a file */
#define T_OPCODE_FS_UID          0x65  /* get the UID of the file's owner */
#define T_OPCODE_FS_GID          0x66  /* get the GID of the file's group */
#define T_OPCODE_FS_MAJOR        0x67  /* get the device major number (char/block devices only) */
#define T_OPCODE_FS_MINOR        0x68  /* get the device minor number (char/block devices only) */
#define T_OPCODE_FS_SIZE         0x69  /* get the size of a file */
#define T_OPCODE_FS_ATIME        0x6a  /* get the access time of a file */
#define T_OPCODE_FS_MTIME        0x6b  /* get the modification time of a file */
#define T_OPCODE_FS_CTIME        0x6c  /* get the inode change time of a file */
#define T_OPCODE_FS_TOUCH        0x6d  /* touch a file (create or update its utime) */
#define T_OPCODE_FS_MKDIR        0x6e  /* create a new (empty) directory */
#define T_OPCODE_FS_LINK         0x6f  /* create a file link */
#define T_OPCODE_FS_SYMLINK      0x70  /* create a symbolic link */
#define T_OPCODE_FS_UNLINK       0x71  /* remove a file */
#define T_OPCODE_FS_RMDIR        0x72  /* remove an empty directory */
#define T_OPCODE_FS_RENAME       0x73  /* rename a file */
#define T_OPCODE_FS_COPY         0x74  /* copy a file from one name to another */
#define T_OPCODE_FS_CHOWN        0x75  /* change file ownership */
#define T_OPCODE_FS_CHGRP        0x76  /* change file group ownership */
#define T_OPCODE_FS_CHMOD        0x77  /* change file permissions */
#define T_OPCODE_FS_SHA1         0x78  /* calculate SHA1 of a file's contents */
#define T_OPCODE_FS_GET          0x79  /* retrieve the contents of a local file */
#define T_OPCODE_FS_PUT          0x7a  /* update the contents of a local file */
#define T_OPCODE_GETFILE         0x7b  /* retrieve a file from the server */
#define T_OPCODE_GETUID          0x7c  /* look up a user's UID, by name */
#define T_OPCODE_GETGID          0x7d  /* look up a group's GID, by name */
#define T_OPCODE_PASSWD_OPEN     0x7e  /* open the passwd/shadow (and group) databases for reading or writing */
#define T_OPCODE_PASSWD_SAVE     0x7f  /* writes the passwd/shadow (and group) databases to disk */
#define T_OPCODE_PASSWD_CLOSE    0x80  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define T_OPCODE_PASSWD_NEXTUID  0x81  /* return the next available UID into a register */
#define T_OPCODE_PASSWD_NEXTGID  0x82  /* return the next available GID into a register */
#define T_OPCODE_USER_FIND       0x83  /* find a user by username, storing the UID into a register */
#define T_OPCODE_USER_GET        0x84  /* retrieve the value of an attribute from the last found user */
#define T_OPCODE_USER_SET        0x85  /* set an attribute on the last found user */
#define T_OPCODE_USER_NEW        0x86  /* allocate a new (unsaved) user object */
#define T_OPCODE_USER_SAVE       0x87  /* commit changes to the current user object (in-memory only) */
#define T_OPCODE_USER_DELETE     0x88  /* remove the current user from the (in-memory) database */
#define T_OPCODE_GROUP_FIND      0x89  /* find a group by name, storing the GID into a register */
#define T_OPCODE_GROUP_GET       0x8a  /* retrieve the value of an attribute from the last found group */
#define T_OPCODE_GROUP_SET       0x8b  /* set an attribute on the last found group */
#define T_OPCODE_GROUP_NEW       0x8c  /* allocate a new (unsaved) group object */
#define T_OPCODE_GROUP_SAVE      0x8d  /* commit changes to the current group object (in-memory only) */
#define T_OPCODE_GROUP_DELETE    0x8e  /* remove the current group from the (in-memory) database */
#define T_OPCODE_AUGEAS_INIT     0x8f  /* initialize the augeas system */
#define T_OPCODE_AUGEAS_DONE     0x90  /* de-initializes the augeas system */
#define T_OPCODE_AUGEAS_ERR      0x91  /* print a helpful augeas error message */
#define T_OPCODE_AUGEAS_WRITE    0x92  /* write all pending changes to disk */
#define T_OPCODE_AUGEAS_SET      0x93  /* set the value of a file/key */
#define T_OPCODE_AUGEAS_GET      0x94  /* retrieve the value of a file/key */
#define T_OPCODE_AUGEAS_FIND     0x95  /* search for and retrieve the value of file/key */
#define T_OPCODE_AUGEAS_REMOVE   0x96  /* remove a file/key */
#define T_OPCODE_EXEC            0x97  /* execute a command */
#define T_OPCODE_DUMP            0x98  /* dump virtual machine state for debugging */
#define T_OPCODE_HALT            0x99  /* halt the virtual machine */


static const char * ASM[] = {
	"noop",           /* T_OPCODE_NOOP             0  0000 */
	"push",           /* T_OPCODE_PUSH             1  0x01 */
	"pop",            /* T_OPCODE_POP              2  0x02 */
	"set",            /* T_OPCODE_SET              3  0x03 */
	"swap",           /* T_OPCODE_SWAP             4  0x04 */
	"add",            /* T_OPCODE_ADD              5  0x05 */
	"sub",            /* T_OPCODE_SUB              6  0x06 */
	"mult",           /* T_OPCODE_MULT             7  0x07 */
	"div",            /* T_OPCODE_DIV              8  0x08 */
	"mod",            /* T_OPCODE_MOD              9  0x09 */
	"call",           /* T_OPCODE_CALL            10  0x0a */
	"ret",            /* T_OPCODE_RET             11  0x0b */
	"retv",           /* T_OPCODE_RETV            12  0x0c */
	"cmp",            /* T_OPCODE_CMP             13  0x0d */
	"strcmp",         /* T_OPCODE_STRCMP          14  0x0e */
	"jmp",            /* T_OPCODE_JMP             15  0x0f */
	"jz",             /* T_OPCODE_JZ              16  0x10 */
	"jnz",            /* T_OPCODE_JNZ             17  0x11 */
	"str",            /* T_OPCODE_STR             18  0x12 */
	"echo",           /* T_OPCODE_ECHO            19  0x13 */
	"err",            /* T_OPCODE_ERR             20  0x14 */
	"perror",         /* T_OPCODE_PERROR          21  0x15 */
	"bail",           /* T_OPCODE_BAIL            22  0x16 */
	"mark",           /* T_OPCODE_MARK            23  0x17 */
	"fs.stat",        /* T_OPCODE_FS_STAT         24  0x18 */
	"fs.file?",       /* T_OPCODE_FS_FILE_P       25  0x19 */
	"fs.symlink?",    /* T_OPCODE_FS_SYMLINK_P    26  0x1a */
	"fs.dir?",        /* T_OPCODE_FS_DIR_P        27  0x1b */
	"fs.chardev?",    /* T_OPCODE_FS_CHARDEV_P    28  0x1c */
	"fs.blockdev?",   /* T_OPCODE_FS_BLOCKDEV_P   29  0x1d */
	"fs.fifo?",       /* T_OPCODE_FS_FIFO_P       30  0x1e */
	"fs.socket?",     /* T_OPCODE_FS_SOCKET_P     31  0x1f */
	"fs.readlink",    /* T_OPCODE_FS_READLINK     32  0x20 */
	"fs.dev",         /* T_OPCODE_FS_DEV          33  0x21 */
	"fs.inode",       /* T_OPCODE_FS_INODE        34  0x22 */
	"fs.mode",        /* T_OPCODE_FS_MODE         35  0x23 */
	"fs.nlink",       /* T_OPCODE_FS_NLINK        36  0x24 */
	"fs.uid",         /* T_OPCODE_FS_UID          37  0x25 */
	"fs.gid",         /* T_OPCODE_FS_GID          38  0x26 */
	"fs.major",       /* T_OPCODE_FS_MAJOR        39  0x27 */
	"fs.minor",       /* T_OPCODE_FS_MINOR        40  0x28 */
	"fs.size",        /* T_OPCODE_FS_SIZE         41  0x29 */
	"fs.atime",       /* T_OPCODE_FS_ATIME        42  0x2a */
	"fs.mtime",       /* T_OPCODE_FS_MTIME        43  0x2b */
	"fs.ctime",       /* T_OPCODE_FS_CTIME        44  0x2c */
	"fs.touch",       /* T_OPCODE_FS_TOUCH        45  0x2d */
	"fs.mkdir",       /* T_OPCODE_FS_MKDIR        46  0x2e */
	"fs.link",        /* T_OPCODE_FS_LINK         47  0x2f */
	"fs.symlink",     /* T_OPCODE_FS_SYMLINK      48  0x30 */
	"fs.unlink",      /* T_OPCODE_FS_UNLINK       49  0x31 */
	"fs.rmdir",       /* T_OPCODE_FS_RMDIR        50  0x32 */
	"fs.rename",      /* T_OPCODE_FS_RENAME       51  0x33 */
	"fs.copy",        /* T_OPCODE_FS_COPY         52  0x34 */
	"fs.chown",       /* T_OPCODE_FS_CHOWN        53  0x35 */
	"fs.chgrp",       /* T_OPCODE_FS_CHGRP        54  0x36 */
	"fs.chmod",       /* T_OPCODE_FS_CHMOD        55  0x37 */
	"fs.sha1",        /* T_OPCODE_FS_SHA1         56  0x38 */
	"fs.get",         /* T_OPCODE_FS_GET          57  0x39 */
	"fs.put",         /* T_OPCODE_FS_PUT          58  0x3a */
	"getfile",        /* T_OPCODE_GETFILE         59  0x3b */
	"getuid",         /* T_OPCODE_GETUID          60  0x3c */
	"getgid",         /* T_OPCODE_GETGID          61  0x3d */
	"passwd.open",    /* T_OPCODE_PASSWD_OPEN     62  0x3e */
	"passwd.save",    /* T_OPCODE_PASSWD_SAVE     63  0x3f */
	"passwd.close",   /* T_OPCODE_PASSWD_CLOSE    64  0x40 */
	"passwd.nextuid", /* T_OPCODE_PASSWD_NEXTUID  65  0x41 */
	"passwd.nextgid", /* T_OPCODE_PASSWD_NEXTGID  66  0x42 */
	"user.find",      /* T_OPCODE_USER_FIND       67  0x43 */
	"user.get",       /* T_OPCODE_USER_GET        68  0x44 */
	"user.set",       /* T_OPCODE_USER_SET        69  0x45 */
	"user.new",       /* T_OPCODE_USER_NEW        70  0x46 */
	"user.save",      /* T_OPCODE_USER_SAVE       71  0x47 */
	"user.delete",    /* T_OPCODE_USER_DELETE     72  0x48 */
	"group.find",     /* T_OPCODE_GROUP_FIND      73  0x49 */
	"group.get",      /* T_OPCODE_GROUP_GET       74  0x4a */
	"group.set",      /* T_OPCODE_GROUP_SET       75  0x4b */
	"group.new",      /* T_OPCODE_GROUP_NEW       76  0x4c */
	"group.save",     /* T_OPCODE_GROUP_SAVE      77  0x4d */
	"group.delete",   /* T_OPCODE_GROUP_DELETE    78  0x4e */
	"augeas.init",    /* T_OPCODE_AUGEAS_INIT     79  0x4f */
	"augeas.done",    /* T_OPCODE_AUGEAS_DONE     80  0x50 */
	"augeas.err",     /* T_OPCODE_AUGEAS_ERR      81  0x51 */
	"augeas.write",   /* T_OPCODE_AUGEAS_WRITE    82  0x52 */
	"augeas.set",     /* T_OPCODE_AUGEAS_SET      83  0x53 */
	"augeas.get",     /* T_OPCODE_AUGEAS_GET      84  0x54 */
	"augeas.find",    /* T_OPCODE_AUGEAS_FIND     85  0x55 */
	"augeas.remove",  /* T_OPCODE_AUGEAS_REMOVE   86  0x56 */
	"exec",           /* T_OPCODE_EXEC            87  0x57 */
	"dump",           /* T_OPCODE_DUMP            88  0x58 */
	"halt",           /* T_OPCODE_HALT            89  0x59 */
	NULL,
};

#define ARG_NONE      0x00
#define ARG_REGISTER  0x01
#define ARG_NUMBER    0x02
#define ARG_STRING    0x04
#define ARG_LABEL     0x08
#define ARG_FUNCTION  0x10

static struct {
	byte_t      token;
	const char *usage;
	byte_t      opcode;
	byte_t      args[2];
} ASM_SYNTAX[] = {
	{ T_OPCODE_NOOP,           "noop",                                           NOOP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PUSH,           "push %a",                                        PUSH,           { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_POP,            "pop %a",                                         POP,            { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_SET,            "set %a (%b|<string>|<number>)",                  SET,            { ARG_REGISTER,                       ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_SWAP,           "swap %a %b",                                     SWAP,           { ARG_REGISTER,                       ARG_REGISTER,                       } },
	{ T_OPCODE_ADD,            "add %a (%b|<number>)",                           ADD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_SUB,            "sub %a (%b|<number>)",                           SUB,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MULT,           "mult %a (%b|<number>)",                          MULT,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_DIV,            "div %a (%b|<number>)",                           DIV,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MOD,            "mod %a (%b|<number>)",                           MOD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_CALL,           "call <function>",                                CALL,           { ARG_FUNCTION,                       ARG_NONE,                           } },
	{ T_OPCODE_RET,            "ret",                                            RET,            { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_RETV,           "retv (%a|<string>|<number>)",                    RET,            { ARG_REGISTER|ARG_STRING|ARG_NUMBER, ARG_NONE,                           } },
	{ T_OPCODE_CMP,            "cmp (%a|<number>) (%b|<number>)",                CMP,            { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_STRCMP,         "strcmp (%a|<string>) (%b|<string>)",             STRCMP,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_JMP,            "jmp <label>",                                    JMP,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JZ,             "jz <label>",                                     JZ,             { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JNZ,            "jnz <label>",                                    JNZ,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_STR,            "str (<string>|%a) %b",                           STR,            { ARG_STRING|ARG_REGISTER,            ARG_REGISTER,                       } },
	{ T_OPCODE_ECHO,           "echo <string>",                                  ECHO,           { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_ERR,            "err <string>",                                   ERR,            { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_PERROR,         "perror <string>",                                PERROR,         { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_BAIL,           "bail",                                           BAIL,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_MARK,           "mark",                                           MARK,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_FS_STAT,        "fs.stat (%a|<string>)",                          FS_STAT,        { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FILE_P,      "fs.file? (%a|<string>)",                         FS_FILE_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SYMLINK_P,   "fs.symlink? (%a|<string>)",                      FS_SYMLINK_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_DIR_P,       "fs.dir? (%a|<string>)",                          FS_DIR_P,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_CHARDEV_P,   "fs.chardev? (%a|<string>)",                      FS_CHARDEV_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_BLOCKDEV_P,  "fs.blockdev? (%a|<string>)",                     FS_BLOCKDEV_P,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FIFO_P,      "fs.fifo? (%a|<string>)",                         FS_FIFO_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SOCKET_P,    "fs.socket? (%a|<string>)",                       FS_SOCKET_P,    { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_READLINK,    "fs.readlink (%a|<string>) %b",                   FS_READLINK,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_DEV,         "fs.dev (%a|<string>) %b",                        FS_DEV,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_INODE,       "fs.inode (%a|<string>) %b",                      FS_INODE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MODE,        "fs.mode (%a|<string>) %b",                       FS_MODE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_NLINK,       "fs.nlink (%a|<string>) %b",                      FS_NLINK,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_UID,         "fs.uid (%a|<string>) %b",                        FS_UID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GID,         "fs.gid (%a|<string>) %b",                        FS_GID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MAJOR,       "fs.major (%a|<string>) %b",                      FS_MAJOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MINOR,       "fs.minor (%a|<string>) %b",                      FS_MINOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_SIZE,        "fs.size (%a|<string>) %b",                       FS_SIZE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_ATIME,       "fs.atime (%a|<string>) %b",                      FS_ATIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MTIME,       "fs.mtime (%a|<string>) %b",                      FS_MTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_CTIME,       "fs.ctime (%a|<string>) %b",                      FS_CTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_TOUCH,       "fs.touch (%a|<string>)",                         FS_TOUCH,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_MKDIR,       "fs.mkdir (%a|<string>)",                         FS_MKDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_LINK,        "fs.link (%a|<string>) (%b|<string>)",            FS_LINK,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_SYMLINK,     "fs.symlink (%a|<string>) (%b|<string>)",         FS_SYMLINK,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_UNLINK,      "fs.unlink (%a|<string>)",                        FS_UNLINK,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RMDIR,       "fs.rmdir (%a|<string>)",                         FS_RMDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RENAME,      "fs.rename (%a|<string>) (%b|<string>)",          FS_RENAME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_COPY,        "fs.copy (%a|<string>) (%b|<string>)",            FS_COPY,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_CHOWN,       "fs.chown (%a|<string>) (%b|<number>)",           FS_CHOWN,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHGRP,       "fs.chgrp (%a|<string>) (%b|<number>)",           FS_CHGRP,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHMOD,       "fs.chmod (%a|<string>) (%b|<number>)",           FS_CHMOD,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_SHA1,        "fs.sha1 (%a|<string>) %b",                       FS_SHA1,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GET,         "fs.get (%a|<string>) %b",                        FS_GET,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_PUT,         "fs.put (%a|<string>) (%b|<string>)",             FS_PUT,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GETFILE,        "getfile (%a|<string>) (%b|<string>)",            GETFILE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GETUID,         "getuid (%a|<string>) %b",                        GETUID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_GETGID,         "getgid (%a|<string>) %b",                        GETGID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_PASSWD_OPEN,    "passwd.open",                                    PASSWD_OPEN,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_SAVE,    "passwd.save",                                    PASSWD_SAVE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_CLOSE,   "passwd.close",                                   PASSWD_CLOSE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_NEXTUID, "passwd.nextuid %a",                              PASSWD_NEXTUID, { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_NEXTGID, "passwd.nextgid %a",                              PASSWD_NEXTGID, { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_USER_FIND,      "user.find (%a|<string>) %b",                     USER_FIND,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_USER_GET,       "user.get (%a|<string>) (%b|<string>|<number>)",  USER_GET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_USER_SET,       "user.set (%a|<string>) (%b|<string>|<number>)",  USER_SET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_USER_NEW,       "user.new (%a|<number>) (%b|<string>)",           USER_NEW,       { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_USER_SAVE,      "user.save",                                      USER_SAVE,      { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_USER_DELETE,    "user.delete",                                    USER_DELETE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_GROUP_FIND,     "group.find (%a|<string>) %b",                    GROUP_FIND,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_GROUP_GET,      "group.get (%a|<string>) (%b|<string>|<number>)", GROUP_GET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_GROUP_SET,      "group.set (%a|<string>) (%b|<string>|<number>)", GROUP_SET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_GROUP_NEW,      "group.new (%a|<number>) (%b|<string>)",          GROUP_NEW,      { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GROUP_SAVE,     "group.save",                                     GROUP_SAVE,     { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_GROUP_DELETE,   "group.delete",                                   GROUP_DELETE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_INIT,    "augeas.init",                                    AUGEAS_INIT,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_DONE,    "augeas.done",                                    AUGEAS_DONE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_ERR,     "augeas.err",                                     AUGEAS_ERR,     { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_WRITE,   "augeas.write",                                   AUGEAS_WRITE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_SET,     "augeas.set (%a|<string>) (%b|<string>)",         AUGEAS_SET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_AUGEAS_GET,     "augeas.get (%a|<string>) %b",                    AUGEAS_GET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_AUGEAS_FIND,    "augeas.find (%a|<string>) %b",                   AUGEAS_FIND,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_AUGEAS_REMOVE,  "augeas.remove (%a|<string>)",                    AUGEAS_REMOVE,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_EXEC,           "exec (%a|<string>) %b",                          EXEC,           { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_DUMP,           "dump",                                           DUMP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_HALT,           "halt",                                           HALT,           { ARG_NONE,                           ARG_NONE,                           } },
	{ 0, 0, 0, { 0, 0 } },
};

#endif
